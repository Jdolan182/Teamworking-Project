import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

/* Generated by Together */

/**
 * This class represents the interactive interface to PACSUS administration
 * functions carried out in the Estates and Campus Services Office. Information
 * about these functions is in the Administration use case diagram (hyperlinked
 * from this class). The interface comprises one screen with all the functions
 * present on it: they could all be on view at once, or perhaps in alternative
 * JPanels (in a JFrame with JTabbedPane); the current date (day number) is
 * always displayed. There could be any number of instances of this class,
 * potentially one for each workstation in the office, with different staff
 * carrying different functions. The class implements Observer, and observes the
 * system status so that it can keep the displayed current date correct.
 * 
 * @stereotype boundary
 * @url element://model:project::PACSUS/design:node:::dbdq3gkua8d3p-nqwlsp
 * @url element://model:project::PACSUS/design:view:::gyozhgkty8w6ujdkjwo
 * @url element://model:project::PACSUS/design:node:::fog6ngkua8d3f-rwvbrf
 * @url element://model:project::PACSUS/design:node:::fog6ngkua8d3f-rwvbrf
 * @url element://model:project::PACSUS/design:node:::3id5ngkua54su-jdp9dt
 * @url element://model:project::PACSUS/design:node:::3id5ngkua54su-jdp9dt
 * @url element://model:project::PACSUS/design:view:::d8yvlgktya8js5ls11m
 * @url element://model:project::PACSUS/design:node:::dbdq3gkua8d3p-nqwlsp
 */
public class Administration_office extends JFrame implements Observer, ActionListener {
	/**
	 * Each instance of Administration_office has a navigable association to the
	 * permit list so that it can enquire about/add/delete/modify permits.
	 * 
	 * @supplierCardinality 1
	 * @clientCardinality 1..*
	 * @label Administration functions
	 * @directed
	 */
	private Permit_list lnkPermit_list;

	/**
	 * Each instance of Administration_office has a navigable association to the
	 * vehicle list so that it can enquire about/add/delete/modify vehicle
	 * details.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Administration functions
	 * @directed
	 */
	private Vehicle_list lnkVehicle_list;

	/**
	 * Each instance of Administration_office has a navigable association to the
	 * system status so that it can find out status information about the
	 * system.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label See date
	 * @directed
	 */
	private System_status lnkSystem_status;

	boolean namePermitted = false;
	boolean vehiclePermitted = false;

	private JTabbedPane tabs;
	private JPanel pnlAddPermit, pnlRecordWarning, pnlDeleteWarning, pnlCancelPermit, pnlStatusEnquiry, pnlModifyPermit;
	private String[] permitTypes = { "Day Visitor", "Regular Visitor", "Permanent Visitor", "University Member" };

	// Add permit tab
	private JLabel lblName, lblRegNo, lblMake, lblModel, lblColour, lblPermit, lblCreatedPermit, lblVehicleAssigned, lblStartDate2, lblEndDate2,
			lblDateError2;
	private JTextField txtName, txtRegNo, txtMake, txtModel, txtColour, txtDate2, txtDate3;
	private JButton btnSubmit;
	private JComboBox<String> cmbPermitType;

	// Record warning tab
	private JLabel lblRegNo2, lblWarningRecorded, lblNoVehicle, lblWarnings;
	private JTextField txtRegNo2;
	private JButton btnAddWarning;

	// Delete warning tab
	private JLabel lblRegNo3, lblWarningDeleted, lblNoVehicle2, lblWarnings2;
	private JTextField txtRegNo3;
	private JButton btnDeleteWarning, btnDeleteAllWarning;

	// Cancel permit tab
	private JLabel lblName2, lblPermitCancelled, lblNoPermit;
	private JTextField txtName2;
	private JButton btnCancelPermit;

	// Status enquiry tab
	private JLabel lblName3, lblNoPermit2, lblPermitType2, lblType, lblVehiclesPermitted, lblWarningsIssued, lblWarnings3, lblIsSuspended,
			lblSuspended, lblNoOfEntries, lblEntries;
	private JTextPane txpVehiclesPermitted;
	private JScrollPane scrVehiclesPermitted;
	private JTextField txtName3;
	private JButton btnFindPermit;
	
	
	// Modify permit tab
	private JLabel lblName4, lblNoPermit3, lblPermitType3, lblType2, lblVehiclesPermitted2, lblNoVehicle3, lblStartDate,
				   lblDate, lblEndDate, lblDate2, lblDateError;
	private JTextPane txpVehiclesPermitted2;
	private JScrollPane scrVehiclesPermitted2;
	private JTextField txtName4, txtVehicle, txtDate;
	private JButton btnFindPermit2, btnAddVehicle, btnRemoveVehicle, btnChangeDate;

	private ArrayList<JTextField> textBoxes = new ArrayList<JTextField>();
	private ArrayList<JLabel> labels = new ArrayList<JLabel>();

	public Administration_office(System_status systemStatus, Vehicle_list vehicleList, Permit_list permitList) {

		lnkVehicle_list = vehicleList;
		lnkPermit_list = permitList;
		lnkSystem_status = systemStatus;
		
		
		
	    lnkSystem_status.addObserver(this);
		
		String day = String.valueOf(lnkSystem_status.getDate().getDayNumber());
		setTitle("Administration Office        Date: " + day );
		setLocation(900, 40);
		setSize(800, 500);
		setResizable(false);
		Container window = getContentPane();
		window.setLayout(new FlowLayout());
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		Dimension d = new Dimension(750, 400);

		tabs = new JTabbedPane();

		pnlAddPermit = new JPanel();
		pnlAddPermit.setLayout(new GridLayout(10, 2));
		pnlAddPermit.setPreferredSize(d);
		tabs.addTab("Add Permit", pnlAddPermit);

		pnlRecordWarning = new JPanel();
		pnlRecordWarning.setLayout(new GridLayout(5, 2));
		pnlRecordWarning.setPreferredSize(d);
		tabs.addTab("Record Warning", pnlRecordWarning);

		pnlDeleteWarning = new JPanel();
		pnlDeleteWarning.setLayout(new GridLayout(5, 2));
		pnlDeleteWarning.setPreferredSize(d);
		tabs.addTab("Delete Warning", pnlDeleteWarning);

		pnlCancelPermit = new JPanel();
		pnlCancelPermit.setLayout(new GridLayout(4, 2));
		pnlCancelPermit.setPreferredSize(d);
		tabs.addTab("Cancel Permit", pnlCancelPermit);

		pnlStatusEnquiry = new JPanel();
		pnlStatusEnquiry.setLayout(new GridLayout(7, 2));
		pnlStatusEnquiry.setPreferredSize(d);
		tabs.addTab("Status Enquiry", pnlStatusEnquiry);

		pnlModifyPermit = new JPanel();
		pnlModifyPermit.setLayout(new GridLayout(10, 2));
		pnlModifyPermit.setPreferredSize(d);
		tabs.addTab("Modify Permit", pnlModifyPermit);

		// Add permit tab
		lblName = new JLabel("Name: ");
		pnlAddPermit.add(lblName);
		txtName = new JTextField("");
		pnlAddPermit.add(txtName);
		textBoxes.add(txtName);

		lblRegNo = new JLabel("Registration Number: ");
		pnlAddPermit.add(lblRegNo);
		txtRegNo = new JTextField("");
		pnlAddPermit.add(txtRegNo);
		textBoxes.add(txtRegNo);

		lblMake = new JLabel("Car make: ");
		pnlAddPermit.add(lblMake);
		txtMake = new JTextField("");
		pnlAddPermit.add(txtMake);
		textBoxes.add(txtMake);

		lblModel = new JLabel("Car model: ");
		pnlAddPermit.add(lblModel);
		txtModel = new JTextField("");
		pnlAddPermit.add(txtModel);
		textBoxes.add(txtModel);

		lblColour = new JLabel("Car colour: ");
		pnlAddPermit.add(lblColour);
		txtColour = new JTextField("");
		pnlAddPermit.add(txtColour);
		textBoxes.add(txtColour);

		lblPermit = new JLabel("Enter Permit Type: ");
		pnlAddPermit.add(lblPermit);
		cmbPermitType = new JComboBox<String>(permitTypes);
		cmbPermitType.setSelectedIndex(0);
		cmbPermitType.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
				 String type = (String)cmbPermitType.getSelectedItem();
				 showDate(type);
			}
	    });
		pnlAddPermit.add(cmbPermitType);
		
		
		lblStartDate2 = new JLabel("Visit Date: ");
		pnlAddPermit.add(lblStartDate2);
		//lblDate3 = new JLabel(String.valueOf(lnkSystem_status.getDate().getDayNumber()));
		//pnlAddPermit.add(lblDate3);
		txtDate2 = new JTextField();
		pnlAddPermit.add(txtDate2);

		
		lblEndDate2 = new JLabel("");
		pnlAddPermit.add(lblEndDate2);
		labels.add(lblEndDate2);
		txtDate3 = new JTextField();
		txtDate3.setVisible(false);
		pnlAddPermit.add(txtDate3);

		btnSubmit = new JButton("Submit");
		btnSubmit.setHorizontalAlignment(JButton.CENTER);
		pnlAddPermit.add(btnSubmit);
		btnSubmit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clearLabels();
				if(validateInput(txtName.getText(), txtRegNo.getText())){
				checkLists();
				}
				else{
					lblCreatedPermit.setText("You have to enter something in the box(name and reg no)");
				}
			}
		});

		lblCreatedPermit = new JLabel("");
		pnlAddPermit.add(lblCreatedPermit);
		labels.add(lblCreatedPermit);

		lblVehicleAssigned = new JLabel("");
		pnlAddPermit.add(lblVehicleAssigned);
		labels.add(lblVehicleAssigned);

		// Record warning tab
		lblRegNo2 = new JLabel("Registration Number: ");
		pnlRecordWarning.add(lblRegNo2);
		txtRegNo2 = new JTextField("");
		txtRegNo2.setName("txtRegNo2");
		pnlRecordWarning.add(txtRegNo2);
		textBoxes.add(txtRegNo2);

		btnAddWarning = new JButton("Add Warning");
		pnlRecordWarning.add(btnAddWarning);
		btnAddWarning.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				disableChangeVehicle();
				disableChangeDate();
				clearLabels();
				if(validateInput(txtRegNo2.getText())){
					addWarning(txtRegNo2.getText());
				}
				else{
					lblNoVehicle.setText("You have to enter something in the box");
				}
			}
		});

		lblWarningRecorded = new JLabel("");
		pnlRecordWarning.add(lblWarningRecorded);
		labels.add(lblWarningRecorded);

		lblNoVehicle = new JLabel("");
		pnlRecordWarning.add(lblNoVehicle);
		labels.add(lblNoVehicle);

		lblWarnings = new JLabel("");
		pnlRecordWarning.add(lblWarnings);
		labels.add(lblWarnings);

		// Delete warning tab
		lblRegNo3 = new JLabel("Registration Number: ");
		pnlDeleteWarning.add(lblRegNo3);
		txtRegNo3 = new JTextField("");
		txtRegNo3.setName("txtRegNo3");
		pnlDeleteWarning.add(txtRegNo3);
		textBoxes.add(txtRegNo3);

		btnDeleteWarning = new JButton("Delete Warning");
		pnlDeleteWarning.add(btnDeleteWarning);
		btnDeleteWarning.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				disableChangeVehicle();
				disableChangeDate();
				clearLabels();
				if(validateInput(txtRegNo3.getText())){
					deleteWarning(txtRegNo3.getText());
				}
				else{
					lblWarnings2.setText("You have to enter something in the box");
				}
			}
		});

		lblWarningDeleted = new JLabel("");
		pnlDeleteWarning.add(lblWarningDeleted);
		labels.add(lblWarningDeleted);

		btnDeleteAllWarning = new JButton("Delete All Warnings");
		pnlDeleteWarning.add(btnDeleteAllWarning);
		btnDeleteAllWarning.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				disableChangeVehicle();
				disableChangeDate();
				clearLabels();
				if(validateInput(txtRegNo3.getText())){
					deleteAllWarnings(txtRegNo3.getText());
				}
				else{
					lblWarnings2.setText("You have to enter something in the box");
				}
			}
		});

		lblWarnings2 = new JLabel("");
		pnlDeleteWarning.add(lblWarnings2);
		labels.add(lblWarnings2);

		lblNoVehicle2 = new JLabel("");
		pnlDeleteWarning.add(lblNoVehicle2);
		labels.add(lblNoVehicle2);
		
		lblDateError2 = new JLabel("");
		labels.add(lblDateError2);
		pnlAddPermit.add(lblDateError2);

		// Cancel permit tab
		lblName2 = new JLabel("Permit Holder's Name: ");
		pnlCancelPermit.add(lblName2);
		txtName2 = new JTextField("");
		txtName2.setName("txtName2");
		pnlCancelPermit.add(txtName2);
		textBoxes.add(txtName2);

		btnCancelPermit = new JButton("Cancel Permit");
		pnlCancelPermit.add(btnCancelPermit);
		btnCancelPermit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				disableChangeVehicle();
				disableChangeDate();
				clearLabels();
				if(validateInput(txtName2.getText())){
					cancelPermit(txtName2.getText());
				}
				else{
					lblNoPermit.setText("You have to enter something in the box");
				}
			}
		});

		lblPermitCancelled = new JLabel("");
		pnlCancelPermit.add(lblPermitCancelled);
		labels.add(lblPermitCancelled);

		lblNoPermit = new JLabel("");
		pnlCancelPermit.add(lblNoPermit);
		labels.add(lblNoPermit);

		// Status enquiry tab
		lblName3 = new JLabel("Permit Holder's Name: ");
		pnlStatusEnquiry.add(lblName3);
		txtName3 = new JTextField("");
		txtName3.setName("txtName3");
		pnlStatusEnquiry.add(txtName3);
		textBoxes.add(txtName3);

		btnFindPermit = new JButton("Find Permit");
		pnlStatusEnquiry.add(btnFindPermit);
		btnFindPermit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				disableChangeVehicle();
				disableChangeDate();
				clearLabels();
				if(validateInput(txtName3.getText())){
				statusEnquiry(txtName3.getText());
				}
				else{
					lblNoPermit2.setText("You have to enter something in the box");
				}
			}
		});

		lblNoPermit2 = new JLabel("");
		pnlStatusEnquiry.add(lblNoPermit2);
		labels.add(lblNoPermit2);
		
		lblPermitType2 = new JLabel("Permit Type: ");
		pnlStatusEnquiry.add(lblPermitType2);	
		lblType = new JLabel("");
		pnlStatusEnquiry.add(lblType);
		labels.add(lblType);

		lblVehiclesPermitted = new JLabel("Vehicles permitted: ");
		pnlStatusEnquiry.add(lblVehiclesPermitted);

		txpVehiclesPermitted = new JTextPane();
		txpVehiclesPermitted.setEditable(false);

		scrVehiclesPermitted = new JScrollPane(txpVehiclesPermitted);
		scrVehiclesPermitted.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		pnlStatusEnquiry.add(scrVehiclesPermitted);

		lblWarningsIssued = new JLabel("Warnings Issued: ");
		pnlStatusEnquiry.add(lblWarningsIssued);
		lblWarnings3 = new JLabel("");
		pnlStatusEnquiry.add(lblWarnings3);
		labels.add(lblWarnings3);

		lblIsSuspended = new JLabel("Suspended: ");
		pnlStatusEnquiry.add(lblIsSuspended);
		lblSuspended = new JLabel("");
		pnlStatusEnquiry.add(lblSuspended);
		labels.add(lblSuspended);

		lblNoOfEntries = new JLabel("Number of entries: ");
		pnlStatusEnquiry.add(lblNoOfEntries);
		lblEntries = new JLabel("");
		pnlStatusEnquiry.add(lblEntries);
		labels.add(lblEntries);

		// Modify permit tab
		lblName4 = new JLabel("Permit Holder's Name: ");
		pnlModifyPermit.add(lblName4);
		txtName4 = new JTextField("");
		txtName4.setName("txtName4");
		pnlModifyPermit.add(txtName4);
		textBoxes.add(txtName4);

		btnFindPermit2 = new JButton("Find Permit");
		pnlModifyPermit.add(btnFindPermit2);
		btnFindPermit2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clearLabels();
				if(validateInput(txtName4.getText())){
				findPermit(txtName4.getText());
				}
				else{
					lblNoPermit3.setText("You have to enter something in the box");
				}
			}
		});

		lblNoPermit3 = new JLabel("");
		pnlModifyPermit.add(lblNoPermit3);
		labels.add(lblNoPermit3);
		
		lblPermitType3 = new JLabel("Permit Type: ");
		pnlModifyPermit.add(lblPermitType3);	
		lblType2 = new JLabel("");
		pnlModifyPermit.add(lblType2);
		labels.add(lblType2);

		lblVehiclesPermitted2 = new JLabel("Vehicles permitted: ");
		pnlModifyPermit.add(lblVehiclesPermitted2);

		txpVehiclesPermitted2 = new JTextPane();
		txpVehiclesPermitted2.setEditable(false);

		scrVehiclesPermitted2 = new JScrollPane(txpVehiclesPermitted2);
		scrVehiclesPermitted2.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		pnlModifyPermit.add(scrVehiclesPermitted2);
		
		
		btnAddVehicle = new JButton("Add Vehicle");
		btnAddVehicle.setEnabled(false);
		pnlModifyPermit.add(btnAddVehicle);
		btnAddVehicle.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(validateInput(txtVehicle.getText())){
				addVehicle(txtName4.getText(), txtVehicle.getText());
				}
				else{
					lblNoVehicle3.setText("You have to enter something in the box");
				}
			}
		});
		
		lblNoVehicle3 = new JLabel("");
		pnlModifyPermit.add(lblNoVehicle3);
		labels.add(lblNoVehicle3);
		
		btnRemoveVehicle = new JButton("Remove Vehicle");
		btnRemoveVehicle.setEnabled(false);
		pnlModifyPermit.add(btnRemoveVehicle);
		btnRemoveVehicle.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(validateInput(txtVehicle.getText())){
				removeVehicle(txtName4.getText(), txtVehicle.getText());
				}
				else{
					lblNoVehicle3.setText("You have to enter something in the box");
				}
			}
		});
		
		
		txtVehicle = new JTextField();
		pnlModifyPermit.add(txtVehicle);
		txtVehicle.setEditable(false);
		textBoxes.add(txtVehicle);
			
		
		lblStartDate = new JLabel("");
		pnlModifyPermit.add(lblStartDate);
		labels.add(lblStartDate);
		lblDate = new JLabel("");
		pnlModifyPermit.add(lblDate);
		labels.add(lblDate);
		
		lblEndDate = new JLabel("");
		pnlModifyPermit.add(lblEndDate);
		labels.add(lblEndDate);
		lblDate2 = new JLabel("");
		pnlModifyPermit.add(lblDate2);
		labels.add(lblDate2);
		
		btnChangeDate = new JButton("Change Date");
		btnChangeDate.setEnabled(false);
		pnlModifyPermit.add(btnChangeDate);
		btnChangeDate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				changeDate(txtName4.getText(), txtDate.getText(), lblType2.getText());
			}
		});
		
		txtDate = new JTextField();
		pnlModifyPermit.add(txtDate);
		textBoxes.add(txtDate);
		txtDate.setEditable(false);
		
		lblDateError = new JLabel("");
		labels.add(lblDateError);
		pnlModifyPermit.add(lblDateError);
		
		
		
		
		
		
		window.add(tabs);

		this.setVisible(true);
	}

	private void clearLabels() {
		txpVehiclesPermitted.setText("");
		txpVehiclesPermitted2.setText("");
		for (int i = 0; i < labels.size(); i++) {
			labels.get(i).setText("");
		}
	}
	
	private void showDate(String type){
		
		txtDate3.setText("");
		
		if(type.equals("Day Visitor")){
			
			lblStartDate2.setText("Visiting Date: ");
			lblEndDate2.setText("");
			
			txtDate2.setVisible(true);
			txtDate2.setEditable(true);
			
			txtDate3.setEditable(false);
			txtDate3.setVisible(false);
			
			
		} 
		else if(type.equals("Regular Visitor")){
			
			lblStartDate2.setText("Start Date: ");
			lblEndDate2.setText("End Date: ");
			
			txtDate2.setVisible(true);
			txtDate2.setEditable(true);

			
			txtDate3.setVisible(true);
			txtDate3.setEditable(true);
			
			
		}
		else if(type.equals("University Member")){
			
			lblStartDate2.setText("Issue Date: ");
			lblEndDate2.setText("");
			
			txtDate2.setVisible(true);
			
			
			txtDate3.setEditable(false);
			txtDate3.setVisible(false);
			
			
		} 
		else if(type.equals("Permanent Visitor")){
			lblStartDate2.setText("");
			lblEndDate2.setText("");
			
			txtDate2.setVisible(false);
			txtDate2.setEditable(false);

			txtDate3.setEditable(false);
			txtDate3.setVisible(false);

		} 
	}

	private void checkLists() {

		if ((namePermitted = lnkPermit_list.checkPermitted(txtName.getText()) == false)
				& (vehiclePermitted = lnkVehicle_list.checkPermitted(txtRegNo.getText()) == false)) {
			addNewPermit();

		} else {
			if (!namePermitted) {
				lblCreatedPermit.setText("Already a permit holder");
			} else {
				lblCreatedPermit.setText("");
			}

			if (!vehiclePermitted) {

				lblVehicleAssigned.setText("Vehicle already permitted");
			} else {
				lblVehicleAssigned.setText("");
			}

			System.out.println(namePermitted);
			System.out.println(vehiclePermitted);
		}

	}

	private void addNewPermit() {

		Permit p = null;

		if (((String) cmbPermitType.getSelectedItem()).equals("Day Visitor")) {
			if(validateDate(txtDate2.getText())){
			p = lnkPermit_list.createDayVisitor(txtName.getText(), Integer.parseInt(txtDate2.getText()));
			}
			else{
				lblCreatedPermit.setText("Date input error");
			}
		}

		if (((String) cmbPermitType.getSelectedItem()).equals("Regular Visitor")) {
			if(validateDate(txtDate2.getText(), txtDate3.getText())){
			p = lnkPermit_list.createRegularVisitor(txtName.getText(), Integer.parseInt(txtDate2.getText()), Integer.parseInt(txtDate3.getText()));
			}
			else{
				lblCreatedPermit.setText("Date input error");
			}
		}

		if (((String) cmbPermitType.getSelectedItem()).equals("Permanent Visitor")) {
			p = lnkPermit_list.createPermanentVisitor(txtName.getText());
		}

		if (((String) cmbPermitType.getSelectedItem()).equals("University Member")) {
			p = lnkPermit_list.createUniversityPermit(txtName.getText(), lnkSystem_status.getDate());
		}
		
		if(p != null){
		System.out.println(namePermitted);
		System.out.println(vehiclePermitted);
		lnkVehicle_list.addNewVehicle(p, txtRegNo.getText(), txtMake.getText(), txtModel.getText(),
				txtColour.getText());
		lblCreatedPermit.setText("Permit Created");
		lblVehicleAssigned.setText("");

		for (int i = 0; i < textBoxes.size(); i++) {
			textBoxes.get(i).setText("");
		}
		}
	}

	private void addWarning(String regNo) {

		if (lnkVehicle_list.checkPermitted(regNo)) {
			if (!(lnkVehicle_list.getWarnings(regNo) == 3)) {
				if (lnkVehicle_list.addWarning(regNo)) {
					if (!(lnkVehicle_list.getWarnings(regNo) == 3)) {
						lblWarningRecorded.setText("Warning added to permit");
					} else {
						lblWarningRecorded.setText("This permit is suspended");
					}
					lblWarnings.setText("Permit Warnings: " + lnkVehicle_list.getWarnings(regNo));
					lblNoVehicle.setText("");

				}
			} else {
				lblWarningRecorded.setText("This permit is suspended");
				lblWarnings.setText("Permit Warnings: " + lnkVehicle_list.getWarnings(regNo));
				lblNoVehicle.setText("");
			}

		} else {
			lblNoVehicle.setText("Vehicle not permitted");
			lblWarningRecorded.setText("");
			lblWarnings.setText("");
		}

		for (int i = 0; i < textBoxes.size(); i++) {
			if (textBoxes.get(i).getName() != "txtRegNo2") {
				textBoxes.get(i).setText("");
			}
		}
	}

	private void deleteWarning(String regNo) {

		if (lnkVehicle_list.checkPermitted(regNo)) {
			if (!(lnkVehicle_list.getWarnings(regNo) == 0)) {
				lnkVehicle_list.deleteWarning(regNo);
				lblWarningDeleted.setText("Warning deleted from permit");
				lblWarnings2.setText("Permit Warnings: " + lnkVehicle_list.getWarnings(regNo));
			} else {
				lblWarningDeleted.setText("No warnings on this permit");
				lblWarnings2.setText("Permit Warnings: " + lnkVehicle_list.getWarnings(regNo));
				lblNoVehicle2.setText("");
			}
		} else {
			lblNoVehicle2.setText("Vehicle not permitted");
			lblWarningDeleted.setText("");
			lblWarnings2.setText("");
		}

		for (int i = 0; i < textBoxes.size(); i++) {
			if (textBoxes.get(i).getName() != "txtRegNo3") {
				textBoxes.get(i).setText("");
			}
		}
	}

	private void deleteAllWarnings(String regNo) {

		if (lnkVehicle_list.checkPermitted(regNo)) {
			if (!(lnkVehicle_list.getWarnings(regNo) == 0)) {
				lnkVehicle_list.deleteAllWarnings(regNo);
				lblWarningDeleted.setText("All warnings deleted from permit");
				lblWarnings2.setText("Permit Warnings: " + lnkVehicle_list.getWarnings(regNo));
			} else {
				lblWarningDeleted.setText("No warnings on this permit");
				lblWarnings2.setText("Permit Warnings: " + lnkVehicle_list.getWarnings(regNo));
				lblNoVehicle2.setText("");
			}
		} else {
			lblNoVehicle2.setText("Vehicle not permitted");
			lblWarningDeleted.setText("");
			lblWarnings2.setText("");
		}

		for (int i = 0; i < textBoxes.size(); i++) {
			if (textBoxes.get(i).getName() != "txtRegNo3") {
				textBoxes.get(i).setText("");
			}
		}
	}

	private void cancelPermit(String name) {

		String removed = "";

		if (lnkPermit_list.checkPermitted(name)) {
			ArrayList<Vehicle_info> vi = lnkPermit_list.getVehicleInfo(name);
			lnkVehicle_list.removeAllVehiclesFromPermit(vi);

		}

		removed = lnkPermit_list.removePermit(name);
		lblPermitCancelled.setText(removed);

		for (int i = 0; i < textBoxes.size(); i++) {
			textBoxes.get(i).setText("");
		}

		for (int i = 0; i < textBoxes.size(); i++) {
			if (textBoxes.get(i).getName() != "txtName2") {
				textBoxes.get(i).setText("");
			}
		}

	}

	public void append(String s, JTextPane pane) {
		try {
			Document doc = pane.getDocument();
			doc.insertString(doc.getLength(), s, null);
		} catch (BadLocationException exc) {
			exc.printStackTrace();
		}
	}

	private void statusEnquiry(String name) {

		int warnings;
		String suspended;
		int entries;

		
		if (lnkPermit_list.checkPermitted(name)) {
			
			
			lblType.setText(lnkPermit_list.getType(name));
			
			
			printVehicles(name, txpVehiclesPermitted);

			warnings = lnkPermit_list.getWarnings(name);
			lblWarnings3.setText(String.valueOf(warnings));

			if (lnkPermit_list.getSuspended(name)) {
				suspended = "Yes";
			} else {
				suspended = "No";
			}
			lblSuspended.setText(suspended);

			entries = lnkPermit_list.getNoOfEntries(name);
			lblEntries.setText(String.valueOf(entries));

		} else {
			lblNoPermit2.setText("No permit found");
		}

		for (int i = 0; i < textBoxes.size(); i++) {
			if (textBoxes.get(i).getName() != "txtName3") {
				textBoxes.get(i).setText("");
			}
		}
	}
	
	private void printVehicles(String name, JTextPane pane){
		
		pane.setText("");
		
		String vehicles;
		
		ArrayList<Vehicle_info> vi = lnkPermit_list.getVehicleInfo(name);
		
		for (int i = 0; i < vi.size(); i++) {
			vehicles = vi.get(i).getRegNo() + "\n";
			append(vehicles, pane);
		}
	}

	
	private void findPermit(String name){
		

		String type;
		
	
		if (lnkPermit_list.checkPermitted(name)) {
			
			type = lnkPermit_list.getType(name);
			lblType2.setText(type);

			printVehicles(name, txpVehiclesPermitted2);
			
			enableChangeVehicle(name);
			
			
			if(type.equals("Day Visitor")){
				
				lblStartDate.setText("Visiting Date: ");
				lblEndDate.setText("");
				lblDate.setText("");//get date	
				
				lblDate.setText(String.valueOf(lnkPermit_list.getDate(name).getDayNumber()));
				
				enableChangeDate();
			} 
			else if(type.equals("Regular Visitor")){
				
				lblStartDate.setText("Start Date: ");
				lblDate.setText(String.valueOf(lnkPermit_list.getDate(name).getDayNumber()));//get date
				
				lblEndDate.setText("End Date: ");
				lblDate2.setText(String.valueOf(lnkPermit_list.getEndDate(name).getDayNumber()));//get date	
				
				enableChangeDate();
			}
			else if(type.equals("University Member")){
				
				lblStartDate.setText("Issued On: ");
				lblEndDate.setText("");
				lblDate.setText(String.valueOf(lnkPermit_list.getDate(name).getDayNumber()));//get date		
				
				disableChangeDate();
			} 
			else if(type.equals("Permanent Visitor")){

				lblStartDate.setText("");
				lblEndDate.setText("");
				disableChangeDate();
				
			} 
			
		} else {
			lblNoPermit3.setText("No permit found");
			disableChangeVehicle();
			disableChangeDate();
		}

		
		
		for (int i = 0; i < textBoxes.size(); i++) {
			if (textBoxes.get(i).getName() != "txtName4") {
				textBoxes.get(i).setText("");
			}
		}
	}
	
	private void enableChangeDate(){
		
		btnChangeDate.setEnabled(true);
		txtDate.setEditable(true);
	}
	
	
	private void disableChangeDate(){
		
		btnChangeDate.setEnabled(false);
		txtDate.setEditable(false);
	}
	
	private void enableChangeVehicle(String name){
		
		ArrayList<Vehicle_info> vi = lnkPermit_list.getVehicleInfo(name);
		
		txtVehicle.setEditable(true);
		btnAddVehicle.setEnabled(true);
		
		if(vi.size() == 1){
			btnRemoveVehicle.setEnabled(false);
		}
		else{
			btnRemoveVehicle.setEnabled(true);
		}
	}
	
	private void disableChangeVehicle(){
	
		txtVehicle.setEditable(false);
		btnAddVehicle.setEnabled(false);
		btnRemoveVehicle.setEnabled(false);
	}
	
	
	
	private void addVehicle(String name, String regNo) {
		
		Permit p = lnkPermit_list.getPermit(name);
		
		if(!lnkVehicle_list.checkPermitted(regNo)){
			
			
			 
			lnkVehicle_list.addNewVehicle(p, regNo, null, null, null);
			printVehicles(name, txpVehiclesPermitted2);
			lblNoVehicle3.setText("Vehicle added");
			enableChangeVehicle(name);
			
		}
		else{
			lblNoVehicle3.setText("Vehicle already assigned to a permit");
		}
	}
	
	private void removeVehicle(String name, String regNo) {
		
		int size;
		int size2;
		Vehicle_info vehicle = null;
		
		
		if(lnkVehicle_list.checkPermitted(regNo)){
			
			
			ArrayList<Vehicle_info> vi = lnkPermit_list.getVehicleInfo(name);
			size = vi.size();
			lnkVehicle_list.removeVehicleFromPermit(vi, regNo);
			
			for(int i = 0; i < vi.size(); i++){
				if(vi.get(i).getRegNo().equals(regNo)){
					vehicle = vi.get(i);
				}
			}
			
			lnkPermit_list.removeVehicle(name, vehicle);
			
			vi = lnkPermit_list.getVehicleInfo(name);
			size2 = vi.size();
			
			if(size != size2){
				printVehicles(name, txpVehiclesPermitted2);
				lblNoVehicle3.setText("Vehicle removed");
				enableChangeVehicle(name);
			}
			else{
				lblNoVehicle3.setText("Vehiclenot assigned to this permit");
			}
			
		}else{
			lblNoVehicle3.setText("Vehicle not permitted");
		}

	}
	
	private void changeDate(String name, String date, String type) {
		
		
		if(validateDate(date)){
				
		lnkPermit_list.setDate(name, Integer.parseInt(date));
		lblDateError.setText("Date Changed");
		
		
		
		if(type.equals("Day Visitor")){
			lblDate.setText(String.valueOf(date));
		}
		else if(type.equals("Regular Visitor")){
			lblDate2.setText(String.valueOf(date));
		}
		}
		else{
			lblDateError.setText("Date input error");
		}
		
	
	}
	
	private boolean validateDate(String date, String date2){
		
		if((date.matches("^\\d+$")) && (date2.matches("^\\d+$"))){
			return true;
		}
		else{
			return false;
		}
	}
	
	private boolean validateDate(String date){
		
		if((date.matches("^\\d+$"))){
			return true;
		}
		else{
			return false;
		}
	}
	
	private boolean validateInput(String input){
		
		if(input.equals("")){
			return false;
		}
		else{
			return true;
		}
	}
	
	private boolean validateInput(String input, String input2){
		
		if(input.equals("") || input2.equals("")){
			return false;
		}
		else{
			return true;
		}
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void update(Observable arg0, Object arg1) {
		// TODO Auto-generated method stub
		String day = String.valueOf(lnkSystem_status.getDate().getDayNumber());

		setTitle("Administration Office        Date: " + day );

	}
}
