import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

/* Generated by Together */

/**
 * The Campus security staff actually activate and deactivate the barriers, enter warnings for vehicles breaching the parking regulations and monitor the state of the barrier system.  This class represents the interactive interface to these functions.  Information about these functions is in the Campus security use case diagram (hyperlinked from this class).
 * The interface comprises one screen with the various functions present on it, all on view at once since there aren't many.
 * There could be several instances of this class: one in the central security office, and one at each entrance to the University (in a staffed booth).
 * The class implements Observer, and observes the system status so that it can keep the displayed information up to date (current date, barriers active or not, log of entries through the barriers).
 * @stereotype boundary
 * @url element://model:project::PACSUS/design:view:::g9p0dgktya8k8-wm9fo9
 * @url element://model:project::PACSUS/design:node:::tgqlgkuaa1ev-8yw95x
 * @url element://model:project::PACSUS/design:node:::iwbcjgkuaa1el-rsvca7
 * @url element://model:project::PACSUS/design:view:::i4dghgkty76ocxiuait
 * @url element://model:project::PACSUS/design:node:::iwbcjgkuaa1el-rsvca7
 * @url element://model:project::PACSUS/design:node:::u4adgkua54te-r9hl9p
 * @url element://model:project::PACSUS/design:node:::1fgjegkuaa1ff-qfaks5
 * @url element://model:project::PACSUS/design:node:::iwbcjgkuaa1el-rsvca7
 */
public class Campus_security extends JFrame implements Observer, ActionListener {
    /**
     * Each instance of Campus_security has a navigable association to the vehicle list so that warnings can be recorded on the permit for vehicles that breach parking regulations. Note that this process goes via the vehicle list as the only information available about such a vehicle is its registration number.
     * @clientCardinality 1..*
     * @supplierCardinality 1
     * @label Record warning
     * @directed
     */	
    private Vehicle_list lnkVehicle_list;

    /**
     * Each instance of Campus_security has a navigable association to the system status so that it can both find out status information about the system, and send controlling messages to the system status (to activate/deactivate the system).
     * @clientCardinality 1..*
     * @supplierCardinality 1
     * @label Control/monitor
     * @directed*/
    private System_status lnkSystem_status;
    
    private String[] lnkLog = new String[20];
	
	private JButton activation;
	private JButton deactivation;
	private JButton checkLog;	
	private JButton issueWarning;
	private JLabel warningReg, feedback1, feedback2;
	//private JList attemptList = new JList(new DefaultListModel());
	private JTextField enterReg;
	private JTextPane logPane;
	private JScrollPane logScrollPane;
	
	
	
	public Campus_security(System_status systemStatus, Vehicle_list vehicleList){
		
		lnkSystem_status = systemStatus;
		lnkVehicle_list = vehicleList;
		
		lnkSystem_status.addObserver(this);
		
		String day = String.valueOf(lnkSystem_status.getDate().getDayNumber());
		
		setTitle("Campus Security        Date: " + day );
		
		//Configure Window
		//setTitle("Campus Security");
		setLocation(100,40);
		setSize(600,450);
		Container window = getContentPane();
		window.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 30));		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		Dimension dimension = new Dimension(200, 24);		
		
		activation = new JButton("Activate Barrier System");
		activation.setPreferredSize(dimension);
		activation.addActionListener(this);
		window.add(activation);		
		
		deactivation = new JButton("Deactivate Barrier System");
		deactivation.setPreferredSize(dimension);
		deactivation.addActionListener(this);
		window.add(deactivation);
			
		warningReg = new JLabel("Registration Number:");
		warningReg.setFont(new Font(warningReg.getFont().getName(), Font.PLAIN, 14));
		window.add(warningReg);
		
		enterReg = new JTextField("");
		enterReg.setPreferredSize(new Dimension(150, 24));		
		window.add(enterReg);		
	
		issueWarning = new JButton("Issue Warning");
		issueWarning.setPreferredSize(dimension);
		issueWarning.addActionListener(this);
		window.add(issueWarning);
		
		feedback1 = new JLabel("");
		window.add(feedback1);
		
		feedback2 = new JLabel("");
		window.add(feedback2);
	
		checkLog = new JButton("Check Log");
		checkLog.addActionListener(this);
		window.add(checkLog);
		
		logPane = new JTextPane();
		logPane.setText("Todays Date: " + day + "\n\nRegistration Numbers\n\n");
		logPane.setEditable(false);	
		logPane.setPreferredSize(new Dimension(480, 180));
		logScrollPane = new JScrollPane(logPane);
		logScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		//logScrollPane.setPreferredSize(new Dimension(500, 200));		
		window.add(logScrollPane);		
		
		this.setVisible(true);
		
	} 
	
	
	public void append(String s) {
		   try {
		      Document doc = logPane.getDocument();
		      doc.insertString(doc.getLength(), s, null);
		   } catch(BadLocationException exc) {
		      exc.printStackTrace();
		   }
		}
	
	
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if(e.getSource() == activation)
		{
			lnkSystem_status.activate();
		}
		
		if(e.getSource() == deactivation)
		{
			lnkSystem_status.deactivate();
		}	
		
		if(e.getSource() == issueWarning)
		{			
			
			if (lnkVehicle_list.checkPermitted(enterReg.getText()))
			{
				int warnings = lnkVehicle_list.getWarnings(enterReg.getText());
				
				if (warnings < 3)
				{
					lnkVehicle_list.addWarning(enterReg.getText());
					feedback1.setText("Warning Issued");
					feedback2.setText(lnkVehicle_list.getWarnings(enterReg.getText()) + " Warnings");
				}	
				
				if (warnings >= 3 - 1)
				{
					feedback1.setText("Permit Suspended");
					feedback2.setText(lnkVehicle_list.getWarnings(enterReg.getText()) + " Warnings");					
				}
			} else
			{				
				feedback1.setText("The Vehicle Does Not Have a Permit");
				feedback2.setText("");
			}
			
		}
		
		if(e.getSource() == checkLog)
		{
			String day = String.valueOf(lnkSystem_status.getDate().getDayNumber());
			
			logPane.setText("Todays Date: " + day + "\n\nRegistration Numbers\n\n");
			lnkLog = lnkSystem_status.getLog();
			String logText = "";
			
			for(int i = 0; i < 20; i++)
			{			
				if(lnkLog[i]!=null)
				{
					logText = lnkLog[i] + "\n";
					append(logText);
				}
												
			}				
		}
	}
	

	@Override
	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub
		
		String day = String.valueOf(lnkSystem_status.getDate().getDayNumber());
		
		for (int i = 0; i < lnkLog.length; i++)
		{
			lnkLog[i] = null;
		}				
	
		logPane.setText("Todays Date: " + day + "\n\nRegistration Numbers\n\n");	

		setTitle("Campus Security        Date: " + day );
	}
	
	
	
}
