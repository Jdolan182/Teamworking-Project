import java.util.ArrayList;

/* Generated by Together */

/**
 * Abstract superclass of all permit types. Note that since this class is abstract, all "instances" of it are actually instances of its concrete subclasses.
 * The vehicles permitted entry by this permit are recorded here in the permittedVehicles attribute.
 * Further information could be recorded here, such as contact details for the permit holder (and for the hosts in Regular and Day visitor subclasses), but in this design these details are not required.
 * Note that no permit holder may have more than one permit at any time, so no two instances of Permit (through its concrete sub-classes) may have the same permit holder name. There is no direct notation for this. Instead the Permit list object collecting the Permit must enforce it by checking new additions (a hash table will help with this).
 * For subclasses with dates:
 * No permits are issued to span from one year into the next; instead re-issue occurs "automatically" at the start of the year (see the Timer use case diagram - follow hyperlink) - all permits are simply carried over to the new year (except Day visitor and Regular visitor permits that expire on the last day of the year). Permits which have a limited period of validity (Day visitor and Regular visitor permits) are automatically cancelled from PACSUS at the start of the day following their last valid day.
 * @url element://model:project::PACSUS/design:node:::bck0ygkuaa1el-kannws
 * @url element://model:project::PACSUS/design:node:::big4zgkuaa1ffhm2nq2
 * @url element://model:project::PACSUS/design:node:::3o0h4gkuaa1ff-a8una8
 * @url element://model:project::PACSUS/design:node:::bc3irgkua8d6hhk5qij
 * @url element://model:project::PACSUS/design:node:::c9j8jgkuaa1g9-no47e9
 * @url element://model:project::PACSUS/design:node:::i0a2zgkuaa1fpovrfhf
 * @url element://model:project::PACSUS/design:node:::59jnfgkua8d49csp0s2
 * @url element://model:project::PACSUS/design:node:::8i4megkuaa1ev-ei2buz
 * @url element://model:project::PACSUS/design:node:::5itvagkuaa1fp-r8hcry
 * @url element://model:project::PACSUS/design:node:::c49kigkuaa1fp1tpzkk
 * @url element://model:project::PACSUS/design:node:::8ocvggkuaa1fzln8v3f
 * @url element://model:project::PACSUS/design:node:::dzawzgkuaa1fpyjau5v
 * @url element://model:project::PACSUS/design:node:::bkkofgkuaa1f5sziik4
 * @url element://model:project::PACSUS/design:view:::d8yvlgktya8js5ls11m
 * @url element://model:project::PACSUS/design:node:::b1afugkuaa1fz-3kb381
 * @url element://model:project::PACSUS/design:node:::ih92sgkuaa1fz-ajbb47
 */
abstract public class Permit {
    /**
	 * The name of the permit holder
	 */
    private String permitHolder;

    /**
     * Counts the number of days on which the campus was entered while the access barriers were in operation. Counting starts when the permit is issued, and afresh at the start of each year.
     */
    private int noOfEntries = 0;

    /**
     * Counts the number of warnings issued to vehicles registered on this permit. 
     */
    private int warnings = 0;

    /**
     * False if the permit has not been suspended, and true if it has (on the third warning). 
     */
    private boolean suspended = false;

    /**
     * Set to false at the start of each day. Remains false until first entry of a vehicle on this permit, when it is set true, and the vehicle is noted in vehicleUsed. Used for checking that subsequent entries in the day are the same vehicle (since exits are not monitored). 
     */
    private boolean enteredToday = false;

    /**
	 * Once a vehicle has entered on this permit on any day, this attribute records the vehicle that entered, so that any subsequent entries associated with this permit can be verified as the same vehicle (or at least with the same registration number!). The attribute will be null until a vehicle has entered.
	 * @clientCardinality 1
	 * @directed true
	 * @label Allowed today
	 * @supplierCardinality 0..1
	 */
    private Vehicle_info vehicleUsedToday;

    /**
	 * This holds references to all the Vehicle_info instances for the vehicles registered to this permit. Note that any vehicle can be registered to only one permit, but many vehicles may be registered to the same permit.
	 * This attribute must be implemented by a collection data structure (such as array, hash table,...).
	 * @clientCardinality 1
	 * @directed true
	 * @label Controls access of
	 * @supplierCardinality 0..*
	 */
    private ArrayList<Vehicle_info> permittedVehicles = new ArrayList<Vehicle_info>();
    
  
    
    private String permitType;
    
    
    public Permit(String name){
    	
    	permitHolder = name;
    }
    
    

    
    public void addVehicleInfo(Vehicle_info vi){
    	
    	permittedVehicles.add(vi);
    	
    }
    
    public void removeVehicleInfo(Vehicle_info vi){
    	
    	permittedVehicles.remove(vi);
    	
    }
    
    public void setPermitType(String type){
    	
    	permitType = type;
    }
    
    public ArrayList<Vehicle_info> getVehicleInfo(){
    	
    	return permittedVehicles;
    }
    
    public String getPermitHolder(){
    	
    	return permitHolder;
    }
    
    
    public String getPertmitType(){
    	
    	return permitType;
    }
    
    public int getNoOfEntries(){
    	
    	return noOfEntries;
    }
    
    public int getWarnings(){
    	
    	return warnings;
    }
    
    public boolean getSuspended(){
    	
    	return suspended;
    }
    
    public boolean getEnteredToday(){
    	
    	return enteredToday;
    }
    
    public void issueWarning(String regNo){
    	
    	this.warnings++;
    	System.out.println(permitHolder + " " + warnings);
    	if(warnings == 3){
    		suspended = true;
    	}
    }
    
    public void deleteWarning(){
    	
    	warnings = warnings - 1;
    	if(suspended == true){
    		suspended = false;
    	}
    	
    }
    
    public void deleteAllWarnings(){
    	
    	warnings = 0;
    	suspended = false;
    	
    }




	public Date getDate() {
		// TODO Auto-generated method stub
		return null;
	}




	public Date getEndDate() {
		// TODO Auto-generated method stub
		return null;
	}




	public void setDate(int day) {
		// TODO Auto-generated method stub
		
	}
    
}
