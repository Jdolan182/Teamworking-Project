import javax.swing.JFrame;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;


/* Generated by Together */

/**
 * This class represents the access control barriers.
 * Information about the barrier functions is in the Barrier use case diagram (hyperlinked from this class).
 * Although in reality this class will be realised by (programmable) hardware with a moveable barrier, and a camera with a registration number recognition system, here the interface comprises one screen with the various functions present on it, all on view at once since there aren't many.
 * There will be a large word PASS or STOP on display at all times: PASS when the barrier is up because the system is inactive or temporarily when a permitted vehicle is being allowed through, and STOP when the barrier is down. There will be a text field to enter the registration number read by the camera, and a button to indicate that the number has been read and is ready for checking (and raising the barrier or not, as appropriate).
 * To simulate the passage of a vehicle through the raised barrier, there is another button to be clicked to simulate when a buried electronic sensor indicates that the vehicle is now clear - the barrier can then be lowered (unless, of course, the system has been deactivated by security staff in the interim...).
 * There could be many instances of this class: one at each entrance lane to the University.
 * The class implements Observer, and observes the system status so that it can keep its activated/deactivated status up to date.
 * @stereotype boundary
 * @url element://model:project::PACSUS/design:view:::fx37lgktya8k8hlywa1
 * @url element://model:project::PACSUS/design:node:::1lh49gkua8d3pjgcawx
 * @url element://model:project::PACSUS/design:view:::5mgzcgkty8w6e-xnp1xg
 * @url element://model:project::PACSUS/design:node:::cpf2mgkuaa1ff-mfhlzm
 */
@SuppressWarnings("serial")
public class Barrier extends JFrame implements Observer, ActionListener{
    /**
     * Each instance of Barrier has a navigable association to the permit list so that when a vehicle's registration number has been recognized by the camera, the barrier can check whether to raise itself or not by checking the status of that vehicle's permit.
     * @clientCardinality 1..*
     * @supplierCardinality 1
     * @label Access permits
     * @directed*/
	
    private Vehicle_list lnkVehicle_list;

    /**
     * Each instance of Barrier has a navigable association to the system status so that it can check whether the barrier system as a whole is active or inactive, and so that it can send event messages to be recorded in the log.
     * @clientCardinality 1..*
     * @supplierCardinality 1
     * @label Fetch system status info
     * @directed*/
    private System_status lnkSystem_status;

    /**
     * This attribute indicates the active/inactive state of the barrier system - as notified by the system status when it changes (Barrier Observes System status). If false then the barrier must be up. If true then the barrier position is determined by attribute raised. 
     */
    private boolean active;

    /**
     * If the barrier system is active, this attribute indicates whether the barrier is currently in its raised or lowered position. The position is controlled by the result of checking a registration number with the permitted vehicles list, and the "vehicle clear" button. 
     */
    private boolean raised = false;
	
	private JButton submit;  //Button for submitting the reg plate to Security for check
	private JTextField regPlate; //TextField for entering reg plate
	private JLabel status; // Shows current status of barrier 
	private JButton vehicleClear; //Button to clear a vehicle (vehicle has passed the barrier)
	private JTextArea feedback;
	private JLabel enterReg;
	private String regNo;
	private Boolean vehiclePermitted = false;
	private Boolean vehicleAllowed = false;
	String go = "GO";
	String stop = "STOP";
	String lowered = "The barrier is lowered";
	String lifted = "The barrier is lifted";
	
		
	public Barrier(System_status systemStatus, Vehicle_list vehicleList) {
		
		this.lnkSystem_status = systemStatus;
		this.lnkVehicle_list = vehicleList;
		
		lnkSystem_status.addObserver(this);
		
		String day = String.valueOf(lnkSystem_status.getDate().getDayNumber());
		
		setTitle("Barrier        Date: " + day );
		
		//Configure Window
		//setTitle("Barrier");
		setLocation(190, 600);
		setSize(380,300);
		setResizable(false);
		Container window = getContentPane();
		window.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 30));
		this.setVisible(true);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		//Set up input, buttons and Labels		
		enterReg = new JLabel("Enter Registration Number:");
		enterReg.setFont(new Font(enterReg.getFont().getName(), Font.PLAIN, 14));
		window.add(enterReg);
		
		regPlate = new JTextField("");
		regPlate.setPreferredSize(new Dimension(150, 24));
		window.add(regPlate);		
		
		submit = new JButton("Submit");
		submit.setPreferredSize(new Dimension(130, 24));
		window.add(submit);
		submit.addActionListener(this);		
		
		vehicleClear = new JButton("Vehicle Clear");
		vehicleClear.setPreferredSize(new Dimension(130, 24));
		window.add(vehicleClear);
		vehicleClear.addActionListener(this);		
		
		feedback = new JTextArea("");
		feedback.setEditable(false);
		feedback.setFont(new Font(feedback.getFont().getName(), Font.PLAIN, 14));
		window.add(feedback);
		
		status = new JLabel("");
		status.setPreferredSize(new Dimension(40, 40));
		status.setFont(new Font(status.getFont().getName(), Font.PLAIN, 25));
		window.add(status);
		
		active = lnkSystem_status.getSystemState();		
		
		barrierStatus();
		
	}
	

	
	private void barrierStatus() {		
				
		String allowed = "The vehicle has a permit and is allowed access!";
		String noPermit = "The vehicle does not have a permit!";
		String notAllowed = "The vehicle is not allowed access!";			
		
		if(!active)
		{
			setGo();
			submit.setEnabled(false);
			vehicleClear.setEnabled(false);
			regPlate.setEnabled(false);
			feedback.setText(lifted);
		} 				
		
		if(active && !raised)
		{
			regPlate.setEnabled(true);
			submit.setEnabled(true);			
			setStop();
			feedback.setText(lowered);
			
			if(!(regNo==""))
			{
				if (vehiclePermitted && vehicleAllowed)
				{							
					raised = true;					
				}
				else if (vehiclePermitted && !vehicleAllowed)
				{
					setStop();
					feedback.setText(notAllowed);
					raised = false;
					vehicleClear.setEnabled(false);
					regPlate.setText("");
					regNo = "";
				}
				else if (!vehiclePermitted && vehicleAllowed || !vehiclePermitted && !vehicleAllowed)
				{
					setStop();
					feedback.setText(noPermit);
					raised = false;
					vehicleClear.setEnabled(false);
					regPlate.setText("");
					regNo="";
				}				
			}		
		}
		
		if(active && raised)
		{
			regPlate.setText("");
			regNo="";
			submit.setEnabled(true);
			vehicleClear.setEnabled(true);
			vehicleClear.setFocusable(true);
			setGo();
			feedback.setText(lifted + "\n\n" + allowed);
			regPlate.setEnabled(false);
			submit.setEnabled(false);
		}
		
		
	}



	private void setStop() {
		
		status.setText(stop);
		status.setForeground(Color.WHITE);
		status.setBackground(Color.RED);
		status.setPreferredSize(new Dimension(70, 40));
		status.setOpaque(true);
	}



	private void setGo() {
		
		status.setText(go);
		status.setBackground(Color.GREEN);
		status.setForeground(Color.BLACK);
		status.setOpaque(true);	
		status.setPreferredSize(new Dimension(40, 40));
	}



	public void actionPerformed(ActionEvent e) {		
		
		String clear = "The vehicle is clear of the barrier";
		
		if(e.getSource() == submit){
			
						
				regNo = regPlate.getText();
				
				lnkSystem_status.addEntry(regNo);
				
				if (lnkVehicle_list.checkPermitted(regNo, lnkSystem_status.getDate().getDayNumber()))
				{
					vehiclePermitted = true;
				}
				else
				{
					vehiclePermitted = false;				
				}
				
				
				if (lnkVehicle_list.vehicleAllowedAccess(regNo) == true)
				{
					vehicleAllowed = true;
				}
				else
				{
					vehicleAllowed = false;				
				}
			
				
				
				
				barrierStatus();
				
				//lnkSystem_status.getLog();
			}
		
			if(e.getSource() == vehicleClear){
				
				setStop();
				//regNo = regPlate.getText();
				//lnkSystem_status.addEntry(regNo);
				feedback.setText(clear + "\n\n" + lowered);
				regPlate.setText("");
				raised = false;
				submit.setEnabled(true);
				regPlate.setEnabled(true);
				vehicleClear.setEnabled(false);	
				regNo="";
			}
			
		}
	
		@Override
		public void update(Observable o, Object arg) {
			// TODO Auto-generated method stub
			active = lnkSystem_status.getSystemState();		
			regPlate.setText("");
			feedback.setText("");
			regNo = "";
			raised = false;
			if(active)
			{
				feedback.setText(lowered);
			}
			else if(!active)
			{
				feedback.setText(lifted);
			}
			barrierStatus();
			
			String day = String.valueOf(lnkSystem_status.getDate().getDayNumber());

			setTitle("Barrier        Date: " + day );
		}
	
	}
