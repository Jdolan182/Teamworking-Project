import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;

/* Generated by Together */

/**
 * Permit list manages the collection of permits currently issued and not yet cancelled (or expired). It handles most of the use cases in the Administration section. Note that each Permit must have a unique permit holder name (so a HashTable is probably a good implementation of the collection, with permit holder name as key).
 * There will only be one instance of this class.
 * @url element://model:project::PACSUS/design:node:::do5vzgkua8d4jdr1bhg
 * @url element://model:project::PACSUS/design:node:::cn91cgkua8d5ntyb7jy
 */
public class Permit_list {
    /** The Permit list maintains a collection of the Permits currently issued. 
     * 
     * This association must be implemented by an attribute holding a collection data structure (for example: array, hash table - the latter is recommended). 
     * 
     * Note that no two Permits may have the same permit holder name (this information is not represented diagrammatically).
     * @associates Permit
     * @label Contains
     * @clientCardinality 1
     * @supplierCardinality 0..*
     * @directed*/
    private java.util.Hashtable<String, Permit> lnkPermit;
    
        
    public Permit_list(){
    	lnkPermit = new Hashtable<String, Permit>();
    }
    
	public boolean checkPermitted(String name){
		
    	if(lnkPermit.containsKey(name))
    	{
    		return true;
    		
    	}
    	else
    	{
    		return false;    	
    	}
    }
	
	
	public ArrayList<Vehicle_info> getVehicleInfo(String name){
		
		return lnkPermit.get(name).getVehicleInfo();

	}
	
	
	public void setDate(String name, int day){
		lnkPermit.get(name).setDate(day);
	}
	
	public void removeVehicle(String name, Vehicle_info vi){
		 
		 lnkPermit.get(name).removeVehicleInfo(vi);
	}
	
	
	public Permit getPermit(String name){
		return lnkPermit.get(name);
	}

	
    public Date getEndDate(String name){
    	return lnkPermit.get(name).getEndDate();
    }
	
    public Date getDate(String name){
    	return lnkPermit.get(name).getDate();
    }
	
	public int getWarnings(String name){
		return lnkPermit.get(name).getWarnings();
	}
	
	public int getNoOfEntries(String name){
		return lnkPermit.get(name).getNoOfEntries();
	}
	
	public boolean getSuspended(String name){
		return lnkPermit.get(name).getSuspended();
	}
	
	public String getType(String name){
		return lnkPermit.get(name).getPertmitType();
	}
	

	

	public Permit createRegularVisitor(String name, int start, int end){
		
		//might be new pw
		Regular_visitor_permit rvp = new Regular_visitor_permit(name, start, end);
		lnkPermit.put(name, rvp);
		
		return rvp;
	}
	
	public Permit createPermanentVisitor(String name){
		Permanent_visitor_permit pvp = new Permanent_visitor_permit(name); 
		lnkPermit.put(name, pvp);
		
		return pvp;
	}
	
	public void resetWarnings(String name){
		lnkPermit.get(name).deleteAllWarnings();
	}

	
	public Permit createDayVisitor(String name, int visit){
		Day_visitor_permit dvp = new Day_visitor_permit(name, visit);
		lnkPermit.put(name, dvp);
		
		return dvp;
	}
	
	public Permit createUniversityPermit(String name, Date start){
		 University_member_permit uvp = new University_member_permit(name, start); 
		 lnkPermit.put(name, uvp);
		 
		 return uvp;
	}
	
	public String removePermit(String name){
		
		if(lnkPermit.containsKey(name)){
			lnkPermit.remove(name);
			return "Permit removed";
		}
		else {
			return "No permit found";
		}
	}
	
	public ArrayList<String> getList(){
		
		Enumeration<String> e = lnkPermit.keys();
		ArrayList<String> allNames = new ArrayList<String>();
		
		
		 while (e.hasMoreElements()){
			 allNames.add(e.nextElement());
		 }
		 
		 return allNames;
		 
	}
	
	public ArrayList<String> newDay(Date d){
		
		
		Enumeration<String> e = lnkPermit.keys();
		ArrayList<String> allNames = new ArrayList<String>();
		ArrayList<String> names = new ArrayList<String>();
		
		 while (e.hasMoreElements()){
			 allNames.add(e.nextElement());
		 }
		 
		 for(int i = 0; i < allNames.size(); i++){
			if(lnkPermit.get(allNames.get(i)).getPertmitType() == "Day Visitor" || lnkPermit.get(allNames.get(i)).getPertmitType() == "Regular Visitor"){
				if((lnkPermit.get(allNames.get(i)).getEndDate().getDayNumber() < d.getDayNumber()) || d.getDayNumber() == 0){
					names.add(allNames.get(i));
			 	}
			 }
		 }
		 return names;

		
		
	}
	
}
